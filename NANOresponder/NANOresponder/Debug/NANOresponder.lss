
NANOresponder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004b4  00000548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800104  00800104  0000054c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bce  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ec  00000000  00000000  000011e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d2  00000000  00000000  000019ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c8  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f7  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002b7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  9e:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <clear_buffer>:
	sei();
}

void clear_buffer()
{
	memset(rxBuffer, '\0', sizeof(rxBuffer));
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	e2 e2       	ldi	r30, 0x22	; 34
  aa:	f1 e0       	ldi	r31, 0x01	; 1
  ac:	df 01       	movw	r26, r30
  ae:	1d 92       	st	X+, r1
  b0:	8a 95       	dec	r24
  b2:	e9 f7       	brne	.-6      	; 0xae <clear_buffer+0x8>
	rxReadPos = 0;
  b4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rxReadPos+0x1>
  b8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <rxReadPos>
	rxWritePos = 0;
  bc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rxWritePos+0x1>
  c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rxWritePos>
	memset(antwoord, '\0', sizeof(antwoord));
  c4:	8e e0       	ldi	r24, 0x0E	; 14
  c6:	e2 e3       	ldi	r30, 0x32	; 50
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	df 01       	movw	r26, r30
  cc:	1d 92       	st	X+, r1
  ce:	8a 95       	dec	r24
  d0:	e9 f7       	brne	.-6      	; 0xcc <clear_buffer+0x26>
  d2:	08 95       	ret

000000d4 <getChar>:
*/
char getChar(void)
{
	char ret = '\0';
	
	if(rxReadPos != rxWritePos)
  d4:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <rxReadPos>
  d8:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <rxReadPos+0x1>
  dc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rxWritePos>
  e0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rxWritePos+0x1>
  e4:	28 17       	cp	r18, r24
  e6:	39 07       	cpc	r19, r25
  e8:	99 f0       	breq	.+38     	; 0x110 <getChar+0x3c>
	{
		ret = rxBuffer[rxReadPos];
  ea:	f9 01       	movw	r30, r18
  ec:	ee 5d       	subi	r30, 0xDE	; 222
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	80 81       	ld	r24, Z
		
		rxReadPos++;
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
		
		if(rxReadPos >= READ_BUFFER_SIZE)
  f6:	20 31       	cpi	r18, 0x10	; 16
  f8:	31 05       	cpc	r19, r1
  fa:	2c f4       	brge	.+10     	; 0x106 <getChar+0x32>
	
	if(rxReadPos != rxWritePos)
	{
		ret = rxBuffer[rxReadPos];
		
		rxReadPos++;
  fc:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <rxReadPos+0x1>
 100:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <rxReadPos>
 104:	08 95       	ret
		
		if(rxReadPos >= READ_BUFFER_SIZE)
		{
			rxReadPos = 0;
 106:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rxReadPos+0x1>
 10a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <rxReadPos>
 10e:	08 95       	ret
	return ret;
}
*/
char getChar(void)
{
	char ret = '\0';
 110:	80 e0       	ldi	r24, 0x00	; 0
		{
			rxReadPos = 0;
		}
	}
	return ret;
}
 112:	08 95       	ret

00000114 <maakBericht>:
		UDR0 = zoneStatus[i];
	}
}
*/
char *maakBericht(char zin[])
{	
 114:	fc 01       	movw	r30, r24
	zin[0] = '$'; //Startkarakter
 116:	84 e2       	ldi	r24, 0x24	; 36
 118:	80 83       	st	Z, r24
	zin[1] = 'M'; //Master adres
 11a:	8d e4       	ldi	r24, 0x4D	; 77
 11c:	81 83       	std	Z+1, r24	; 0x01
	
	if (CODE == 1)
 11e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <CODE>
 122:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <CODE+0x1>
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	a1 f4       	brne	.+40     	; 0x152 <maakBericht+0x3e>
	{
		zin[2] = 'C'; //CD : Er is een code beschikbaar
 12a:	83 e4       	ldi	r24, 0x43	; 67
 12c:	82 83       	std	Z+2, r24	; 0x02
		zin[3] = 'D';
 12e:	84 e4       	ldi	r24, 0x44	; 68
 130:	83 83       	std	Z+3, r24	; 0x03
		
		zin[4] = code[0]; //Code characters
 132:	a0 e0       	ldi	r26, 0x00	; 0
 134:	b1 e0       	ldi	r27, 0x01	; 1
 136:	8c 91       	ld	r24, X
 138:	84 83       	std	Z+4, r24	; 0x04
		zin[5] = code[1];
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	8c 91       	ld	r24, X
 13e:	11 97       	sbiw	r26, 0x01	; 1
 140:	85 83       	std	Z+5, r24	; 0x05
		zin[6] = code[2];
 142:	12 96       	adiw	r26, 0x02	; 2
 144:	8c 91       	ld	r24, X
 146:	12 97       	sbiw	r26, 0x02	; 2
 148:	86 83       	std	Z+6, r24	; 0x06
		zin[7] = code[3];
 14a:	13 96       	adiw	r26, 0x03	; 3
 14c:	8c 91       	ld	r24, X
 14e:	87 83       	std	Z+7, r24	; 0x07
 150:	09 c0       	rjmp	.+18     	; 0x164 <maakBericht+0x50>
	}
	else
	{
		zin[2] = 'O'; //US : Update Status  (poll naar de status van de slave)
 152:	8f e4       	ldi	r24, 0x4F	; 79
 154:	82 83       	std	Z+2, r24	; 0x02
		zin[3] = 'K';
 156:	8b e4       	ldi	r24, 0x4B	; 75
 158:	83 83       	std	Z+3, r24	; 0x03
		
		zin[4] = '0'; //Code characters
 15a:	80 e3       	ldi	r24, 0x30	; 48
 15c:	84 83       	std	Z+4, r24	; 0x04
		zin[5] = '0';
 15e:	85 83       	std	Z+5, r24	; 0x05
		zin[6] = '0';
 160:	86 83       	std	Z+6, r24	; 0x06
		zin[7] = '0';
 162:	87 83       	std	Z+7, r24	; 0x07
	}
	
	zin[8] = '#'; //Eindkarakter
 164:	83 e2       	ldi	r24, 0x23	; 35
 166:	80 87       	std	Z+8, r24	; 0x08
	zin[9] = '\n';
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	81 87       	std	Z+9, r24	; 0x09
	
	return zin;
}
 16c:	cf 01       	movw	r24, r30
 16e:	08 95       	ret

00000170 <startVerzenden>:
		}
	}
}

void startVerzenden()
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
	maakBericht(antwoord);
 174:	82 e3       	ldi	r24, 0x32	; 50
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 8a 00 	call	0x114	; 0x114 <maakBericht>
	PORTB |= 0B00000100;
 17c:	2a 9a       	sbi	0x05, 2	; 5
	//UDR0 = 'T';
	cli();
 17e:	f8 94       	cli
 180:	a2 e3       	ldi	r26, 0x32	; 50
 182:	b1 e0       	ldi	r27, 0x01	; 1
	for (int t=0; t<strlen(antwoord); t++)
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	ed 01       	movw	r28, r26
	{
		UDR0 = antwoord[t];
 18a:	46 ec       	ldi	r20, 0xC6	; 198
 18c:	50 e0       	ldi	r21, 0x00	; 0
{
	maakBericht(antwoord);
	PORTB |= 0B00000100;
	//UDR0 = 'T';
	cli();
	for (int t=0; t<strlen(antwoord); t++)
 18e:	0a c0       	rjmp	.+20     	; 0x1a4 <startVerzenden+0x34>
	{
		UDR0 = antwoord[t];
 190:	2d 91       	ld	r18, X+
 192:	fa 01       	movw	r30, r20
 194:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	ef e1       	ldi	r30, 0x1F	; 31
 198:	fe e4       	ldi	r31, 0x4E	; 78
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <startVerzenden+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <startVerzenden+0x30>
 1a0:	00 00       	nop
{
	maakBericht(antwoord);
	PORTB |= 0B00000100;
	//UDR0 = 'T';
	cli();
	for (int t=0; t<strlen(antwoord); t++)
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	fe 01       	movw	r30, r28
 1a6:	01 90       	ld	r0, Z+
 1a8:	00 20       	and	r0, r0
 1aa:	e9 f7       	brne	.-6      	; 0x1a6 <startVerzenden+0x36>
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	e2 53       	subi	r30, 0x32	; 50
 1b0:	f1 40       	sbci	r31, 0x01	; 1
 1b2:	8e 17       	cp	r24, r30
 1b4:	9f 07       	cpc	r25, r31
 1b6:	60 f3       	brcs	.-40     	; 0x190 <startVerzenden+0x20>
		UDR0 = antwoord[t];
		_delay_ms(5);
	}
	//send("ant\r");
	//send(antwoord);
	PORTB &= 0B11111011;
 1b8:	2a 98       	cbi	0x05, 2	; 5
	sei();
 1ba:	78 94       	sei
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <leesIn>:
}

char leesIn (){
	
	// D9 hoog zetten
	PORTB = 0B00000010;
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	85 b9       	out	0x05, r24	; 5
 1c6:	8f e1       	ldi	r24, 0x1F	; 31
 1c8:	9e e4       	ldi	r25, 0x4E	; 78
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <leesIn+0x8>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <leesIn+0xe>
 1d0:	00 00       	nop
	_delay_ms(5);
	// toestand van D2 lezen
	if(PIND & 0B00000100){
 1d2:	4a 9b       	sbis	0x09, 2	; 9
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <leesIn+0x1a>
		PORTB = 0B00000000;
 1d6:	15 b8       	out	0x05, r1	; 5
		return '*';
 1d8:	8a e2       	ldi	r24, 0x2A	; 42
 1da:	08 95       	ret
	}
	// toestand van D3 lezen
	else if(PIND & 0B00001000){
 1dc:	4b 9b       	sbis	0x09, 3	; 9
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <leesIn+0x24>
		PORTB = 0B00000000;
 1e0:	15 b8       	out	0x05, r1	; 5
		return '7';
 1e2:	87 e3       	ldi	r24, 0x37	; 55
 1e4:	08 95       	ret
	}
	// toestand van D4 lezen
	else if(PIND & 0B00010000){
 1e6:	4c 9b       	sbis	0x09, 4	; 9
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <leesIn+0x2e>
		PORTB = 0B00000000;
 1ea:	15 b8       	out	0x05, r1	; 5
		return '4';
 1ec:	84 e3       	ldi	r24, 0x34	; 52
 1ee:	08 95       	ret
	}
	// toestand van D5 lezen
	else if(PIND & 0B00100000){
 1f0:	4d 9b       	sbis	0x09, 5	; 9
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <leesIn+0x38>
		PORTB = 0B00000000;
 1f4:	15 b8       	out	0x05, r1	; 5
		return '1';
 1f6:	81 e3       	ldi	r24, 0x31	; 49
 1f8:	08 95       	ret
	}
	
	// D8 hoog zetten en D9 laag
	PORTB = 0B00000001;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	8f e1       	ldi	r24, 0x1F	; 31
 200:	9e e4       	ldi	r25, 0x4E	; 78
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <leesIn+0x40>
 206:	00 c0       	rjmp	.+0      	; 0x208 <leesIn+0x46>
 208:	00 00       	nop
	_delay_ms(5);
	// toestand van D2 lezen
	if(PIND & 0B00000100){
 20a:	4a 9b       	sbis	0x09, 2	; 9
 20c:	03 c0       	rjmp	.+6      	; 0x214 <leesIn+0x52>
		PORTB = 0B00000000;
 20e:	15 b8       	out	0x05, r1	; 5
		//moet 0 zijn, maar voor de test is het 20
		return '0';
 210:	80 e3       	ldi	r24, 0x30	; 48
 212:	08 95       	ret
	}
	// toestand van D3 lezen
	else if(PIND & 0B00001000){
 214:	4b 9b       	sbis	0x09, 3	; 9
 216:	03 c0       	rjmp	.+6      	; 0x21e <leesIn+0x5c>
		PORTB = 0B00000000;
 218:	15 b8       	out	0x05, r1	; 5
		return '8';
 21a:	88 e3       	ldi	r24, 0x38	; 56
 21c:	08 95       	ret
	}
	// toestand van D4 lezen
	else if(PIND & 0B00010000){
 21e:	4c 9b       	sbis	0x09, 4	; 9
 220:	03 c0       	rjmp	.+6      	; 0x228 <leesIn+0x66>
		PORTB = 0B00000000;
 222:	15 b8       	out	0x05, r1	; 5
		return '5';
 224:	85 e3       	ldi	r24, 0x35	; 53
 226:	08 95       	ret
	}
	// toestand van D5 lezen
	else if(PIND & 0B00100000){
 228:	4d 9b       	sbis	0x09, 5	; 9
 22a:	03 c0       	rjmp	.+6      	; 0x232 <leesIn+0x70>
		PORTB = 0B00000000;
 22c:	15 b8       	out	0x05, r1	; 5
		return '2';
 22e:	82 e3       	ldi	r24, 0x32	; 50
 230:	08 95       	ret
	}
	
	// D8 laag zetten, en D7 hoog zetten
	PORTB = 0B00000000;
 232:	15 b8       	out	0x05, r1	; 5
	PORTD = 0B10000000;
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	8b b9       	out	0x0b, r24	; 11
 238:	8f e1       	ldi	r24, 0x1F	; 31
 23a:	9e e4       	ldi	r25, 0x4E	; 78
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <leesIn+0x7a>
 240:	00 c0       	rjmp	.+0      	; 0x242 <leesIn+0x80>
 242:	00 00       	nop
	_delay_ms(5);
	// toestand van D2 lezen
	if(PIND & 0B00000100){
 244:	4a 9b       	sbis	0x09, 2	; 9
 246:	03 c0       	rjmp	.+6      	; 0x24e <leesIn+0x8c>
		PORTD = 0B00000000;
 248:	1b b8       	out	0x0b, r1	; 11
		return '#';
 24a:	83 e2       	ldi	r24, 0x23	; 35
 24c:	08 95       	ret
	}
	// toestand van D3 lezen
	else if(PIND & 0B00001000){
 24e:	4b 9b       	sbis	0x09, 3	; 9
 250:	03 c0       	rjmp	.+6      	; 0x258 <leesIn+0x96>
		PORTD = 0B00000000;
 252:	1b b8       	out	0x0b, r1	; 11
		return '9';
 254:	89 e3       	ldi	r24, 0x39	; 57
 256:	08 95       	ret
	}
	// toestand van D4 lezen
	else if(PIND & 0B00010000){
 258:	4c 9b       	sbis	0x09, 4	; 9
 25a:	03 c0       	rjmp	.+6      	; 0x262 <leesIn+0xa0>
		PORTD = 0B00000000;
 25c:	1b b8       	out	0x0b, r1	; 11
		return '6';
 25e:	86 e3       	ldi	r24, 0x36	; 54
 260:	08 95       	ret
	}
	// toestand van D5 lezen
	else if(PIND & 0B00100000){
 262:	4d 9b       	sbis	0x09, 5	; 9
 264:	03 c0       	rjmp	.+6      	; 0x26c <leesIn+0xaa>
		PORTD = 0B00000000;
 266:	1b b8       	out	0x0b, r1	; 11
		return '3';
 268:	83 e3       	ldi	r24, 0x33	; 51
 26a:	08 95       	ret
	}
	
	// D7 laag zetten en D6 hoog zetten
	PORTD = 0B01000000;
 26c:	80 e4       	ldi	r24, 0x40	; 64
 26e:	8b b9       	out	0x0b, r24	; 11
 270:	8f e1       	ldi	r24, 0x1F	; 31
 272:	9e e4       	ldi	r25, 0x4E	; 78
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <leesIn+0xb2>
 278:	00 c0       	rjmp	.+0      	; 0x27a <leesIn+0xb8>
 27a:	00 00       	nop
	_delay_ms(5);
	// toestand van D2 lezen
	if(PIND & 0B00000100){
 27c:	4a 9b       	sbis	0x09, 2	; 9
 27e:	03 c0       	rjmp	.+6      	; 0x286 <leesIn+0xc4>
		PORTD = 0B00000000;
 280:	1b b8       	out	0x0b, r1	; 11
		return 'D';
 282:	84 e4       	ldi	r24, 0x44	; 68
 284:	08 95       	ret
	}
	// toestand van D3 lezen
	else if(PIND & 0B00001000){
 286:	4b 9b       	sbis	0x09, 3	; 9
 288:	03 c0       	rjmp	.+6      	; 0x290 <leesIn+0xce>
		PORTD = 0B00000000;
 28a:	1b b8       	out	0x0b, r1	; 11
		return 'C';
 28c:	83 e4       	ldi	r24, 0x43	; 67
 28e:	08 95       	ret
	}
	// toestand van D4 lezen
	else if(PIND & 0B00010000){
 290:	4c 9b       	sbis	0x09, 4	; 9
 292:	03 c0       	rjmp	.+6      	; 0x29a <leesIn+0xd8>
		PORTD = 0B00000000;
 294:	1b b8       	out	0x0b, r1	; 11
		return 'B';
 296:	82 e4       	ldi	r24, 0x42	; 66
 298:	08 95       	ret
	}
	// toestand van D5 lezen
	else if(PIND & 0B00100000){
 29a:	4d 9b       	sbis	0x09, 5	; 9
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <leesIn+0xe2>
		PORTD = 0B00000000;
 29e:	1b b8       	out	0x0b, r1	; 11
		return 'A';
 2a0:	81 e4       	ldi	r24, 0x41	; 65
 2a2:	08 95       	ret
	}
	
	// D6 terug laag zetten
	PORTD = 0B00000000;
 2a4:	1b b8       	out	0x0b, r1	; 11
	return 'F';
 2a6:	86 e4       	ldi	r24, 0x46	; 70
}
 2a8:	08 95       	ret

000002aa <main>:
//void zoneTest(void);
char *maakBericht(char zin[]);
char leesIn ();

int main(void)
{
 2aa:	5f 92       	push	r5
 2ac:	6f 92       	push	r6
 2ae:	7f 92       	push	r7
 2b0:	8f 92       	push	r8
 2b2:	9f 92       	push	r9
 2b4:	af 92       	push	r10
 2b6:	bf 92       	push	r11
 2b8:	cf 92       	push	r12
 2ba:	df 92       	push	r13
 2bc:	ef 92       	push	r14
 2be:	ff 92       	push	r15
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
	UBRR0H = (BRC >> 8);
 2c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BRC;
 2cc:	80 e1       	ldi	r24, 0x10	; 16
 2ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0) | (1 << TXCIE0);
 2d2:	88 ed       	ldi	r24, 0xD8	; 216
 2d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 2d8:	86 e0       	ldi	r24, 0x06	; 6
 2da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	DDRB = 0B00000100;
 2de:	84 e0       	ldi	r24, 0x04	; 4
 2e0:	84 b9       	out	0x04, r24	; 4
	DDRB = (1 << PORTB0);
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	84 b9       	out	0x04, r24	; 4
	// PORTD &= ~0x02;
	
	char c = 'F';
	char vorig = 'F';
	
	sei();
 2e6:	78 94       	sei
	clear_buffer();
 2e8:	0e 94 53 00 	call	0xa6	; 0xa6 <clear_buffer>
	
	// DDRD |= 0x02; // PD2:Dir
	// PORTD &= ~0x02;
	
	char c = 'F';
	char vorig = 'F';
 2ec:	c6 e4       	ldi	r28, 0x46	; 70
			}
			vorig = c;
			if (codeteller == 4)
			{
				codeteller = 0;
				CODE = 1;
 2ee:	aa 24       	eor	r10, r10
 2f0:	a3 94       	inc	r10
 2f2:	b1 2c       	mov	r11, r1
				//state = zetAan();
			}
			else if (c == 'F')
			{
			}
			else if ((c == 'C')| (c == 'D') | (c == '*')| (c == '#'))
 2f4:	66 24       	eor	r6, r6
 2f6:	63 94       	inc	r6
 2f8:	51 2c       	mov	r5, r1
 2fa:	02 e3       	ldi	r16, 0x32	; 50
 2fc:	11 e0       	ldi	r17, 0x01	; 1
			{
				if ( rxBuffer[i] == '$' )
				{
					if ( rxBuffer[i+1] == 'N' )
					{
						masterStatus[0] = ontvangenBericht[i+2];
 2fe:	0f 2e       	mov	r0, r31
 300:	fe e0       	ldi	r31, 0x0E	; 14
 302:	cf 2e       	mov	r12, r31
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	df 2e       	mov	r13, r31
 308:	f0 2d       	mov	r31, r0
						masterStatus[1] = ontvangenBericht[i+3];
						//send(masterStatus);
						zoneChar[0] = ontvangenBericht[i+4];
 30a:	0f 2e       	mov	r0, r31
 30c:	fc e0       	ldi	r31, 0x0C	; 12
 30e:	ef 2e       	mov	r14, r31
 310:	f1 e0       	ldi	r31, 0x01	; 1
 312:	ff 2e       	mov	r15, r31
 314:	f0 2d       	mov	r31, r0
 316:	01 c0       	rjmp	.+2      	; 0x31a <main+0x70>
 318:	c7 2d       	mov	r28, r7
	
	sei();
	clear_buffer();
	while(1)
	{
		c = leesIn(); // hier lees ik mijn character in van de keypad
 31a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <leesIn>
 31e:	78 2e       	mov	r7, r24
		if (c != vorig){
 320:	c8 17       	cp	r28, r24
 322:	a9 f1       	breq	.+106    	; 0x38e <main+0xe4>
			if (c == 'B')
			{
				//state = zetAanZone();
			}
			else if (c == 'A')
 324:	8f eb       	ldi	r24, 0xBF	; 191
 326:	87 0d       	add	r24, r7
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	18 f1       	brcs	.+70     	; 0x372 <main+0xc8>
			{
				//state = zetAan();
			}
			else if (c == 'F')
 32c:	26 e4       	ldi	r18, 0x46	; 70
 32e:	72 16       	cp	r7, r18
 330:	01 f1       	breq	.+64     	; 0x372 <main+0xc8>
			{
			}
			else if ((c == 'C')| (c == 'D') | (c == '*')| (c == '#'))
 332:	96 2d       	mov	r25, r6
 334:	8a e2       	ldi	r24, 0x2A	; 42
 336:	78 12       	cpse	r7, r24
 338:	95 2d       	mov	r25, r5
 33a:	86 2d       	mov	r24, r6
 33c:	a3 e2       	ldi	r26, 0x23	; 35
 33e:	7a 12       	cpse	r7, r26
 340:	85 2d       	mov	r24, r5
 342:	89 2b       	or	r24, r25
 344:	09 f0       	breq	.+2      	; 0x348 <main+0x9e>
 346:	70 c0       	rjmp	.+224    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 348:	96 2d       	mov	r25, r6
 34a:	8d eb       	ldi	r24, 0xBD	; 189
 34c:	87 0d       	add	r24, r7
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	08 f0       	brcs	.+2      	; 0x354 <main+0xaa>
 352:	95 2d       	mov	r25, r5
 354:	91 11       	cpse	r25, r1
 356:	68 c0       	rjmp	.+208    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
				break;
			}
			else
			{
				//hier komen we als er een getal ingelezen wordt
				icode[codeteller] = c;
 358:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <codeteller>
 35c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <codeteller+0x1>
 360:	fc 01       	movw	r30, r24
 362:	e0 5b       	subi	r30, 0xB0	; 176
 364:	fe 4f       	sbci	r31, 0xFE	; 254
 366:	70 82       	st	Z, r7
				codeteller++;
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <codeteller+0x1>
 36e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <codeteller>
			}
			vorig = c;
			if (codeteller == 4)
 372:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <codeteller>
 376:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <codeteller+0x1>
 37a:	04 97       	sbiw	r24, 0x04	; 4
 37c:	41 f4       	brne	.+16     	; 0x38e <main+0xe4>
			{
				codeteller = 0;
 37e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <codeteller+0x1>
 382:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <codeteller>
				CODE = 1;
 386:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <CODE+0x1>
 38a:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <CODE>
			}
		}
		
		char in = getChar();
 38e:	0e 94 6a 00 	call	0xd4	; 0xd4 <getChar>
		
		if(in == '\n')
 392:	8a 30       	cpi	r24, 0x0A	; 10
 394:	09 f0       	breq	.+2      	; 0x398 <main+0xee>
 396:	c0 cf       	rjmp	.-128    	; 0x318 <main+0x6e>
		{
			strcpy(ontvangenBericht, rxBuffer);
 398:	62 e2       	ldi	r22, 0x22	; 34
 39a:	71 e0       	ldi	r23, 0x01	; 1
 39c:	80 e1       	ldi	r24, 0x10	; 16
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <strcpy>
 3a4:	c2 e2       	ldi	r28, 0x22	; 34
 3a6:	d1 e0       	ldi	r29, 0x01	; 1
 3a8:	0f 2e       	mov	r0, r31
 3aa:	f2 e1       	ldi	r31, 0x12	; 18
 3ac:	8f 2e       	mov	r8, r31
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	9f 2e       	mov	r9, r31
 3b2:	f0 2d       	mov	r31, r0
			//UDR0 = ontvangenBericht[0];
			//send(rxBuffer);
			
			for ( int i = 0; i<READ_BUFFER_SIZE; i++)
			{
				if ( rxBuffer[i] == '$' )
 3b4:	89 91       	ld	r24, Y+
 3b6:	84 32       	cpi	r24, 0x24	; 36
 3b8:	71 f5       	brne	.+92     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				{
					if ( rxBuffer[i+1] == 'N' )
 3ba:	88 81       	ld	r24, Y
 3bc:	8e 34       	cpi	r24, 0x4E	; 78
 3be:	89 f5       	brne	.+98     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
					{
						masterStatus[0] = ontvangenBericht[i+2];
 3c0:	d4 01       	movw	r26, r8
 3c2:	8c 91       	ld	r24, X
 3c4:	d6 01       	movw	r26, r12
 3c6:	8c 93       	st	X, r24
						masterStatus[1] = ontvangenBericht[i+3];
 3c8:	d4 01       	movw	r26, r8
 3ca:	11 96       	adiw	r26, 0x01	; 1
 3cc:	8c 91       	ld	r24, X
 3ce:	d6 01       	movw	r26, r12
 3d0:	11 96       	adiw	r26, 0x01	; 1
 3d2:	8c 93       	st	X, r24
						//send(masterStatus);
						zoneChar[0] = ontvangenBericht[i+4];
 3d4:	d4 01       	movw	r26, r8
 3d6:	12 96       	adiw	r26, 0x02	; 2
 3d8:	8c 91       	ld	r24, X
 3da:	d7 01       	movw	r26, r14
 3dc:	8c 93       	st	X, r24
						zoneChar[1] = ontvangenBericht[i+5];
 3de:	d4 01       	movw	r26, r8
 3e0:	13 96       	adiw	r26, 0x03	; 3
 3e2:	8c 91       	ld	r24, X
 3e4:	d7 01       	movw	r26, r14
 3e6:	11 96       	adiw	r26, 0x01	; 1
 3e8:	8c 93       	st	X, r24
						zoneGetal =  atoi(zoneChar);
						decodeerZones(zoneGetal);
						*/
						
						//if (strncmp("AA", masterStatus, strlen(masterStatus)))
						if ( rxBuffer[i+2] == 'A' && rxBuffer[i+3] == 'A')
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	81 34       	cpi	r24, 0x41	; 65
 3ee:	41 f4       	brne	.+16     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	81 34       	cpi	r24, 0x41	; 65
 3f4:	b1 f4       	brne	.+44     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
						{
							ALARM = 1;
 3f6:	b0 92 05 01 	sts	0x0105, r11	; 0x800105 <__data_end+0x1>
 3fa:	a0 92 04 01 	sts	0x0104, r10	; 0x800104 <__data_end>
 3fe:	09 c0       	rjmp	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
							//UDR0 = 'A';
						}
						//else if (strncmp("US", masterStatus, 2))
						else if ( rxBuffer[i+2] == 'U' && rxBuffer[i+3] == 'S')
 400:	85 35       	cpi	r24, 0x55	; 85
 402:	79 f4       	brne	.+30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 404:	8a 81       	ldd	r24, Y+2	; 0x02
 406:	83 35       	cpi	r24, 0x53	; 83
 408:	61 f4       	brne	.+24     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
						{
							ALARM = 0;
 40a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 40e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
						{
							// Bericht is onbekend
							break;
						}
						
						startVerzenden();
 412:	0e 94 b8 00 	call	0x170	; 0x170 <startVerzenden>
 416:	bf ef       	ldi	r27, 0xFF	; 255
 418:	8b 1a       	sub	r8, r27
 41a:	9b 0a       	sbc	r9, r27
			strcpy(ontvangenBericht, rxBuffer);
			//send(ontvangenBericht);
			//UDR0 = ontvangenBericht[0];
			//send(rxBuffer);
			
			for ( int i = 0; i<READ_BUFFER_SIZE; i++)
 41c:	c0 17       	cp	r28, r16
 41e:	d1 07       	cpc	r29, r17
 420:	49 f6       	brne	.-110    	; 0x3b4 <main+0x10a>
					{
						break;
					}
				}		
			}
			clear_buffer();
 422:	0e 94 53 00 	call	0xa6	; 0xa6 <clear_buffer>
 426:	78 cf       	rjmp	.-272    	; 0x318 <main+0x6e>
		}
	}
}
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	df 90       	pop	r13
 43a:	cf 90       	pop	r12
 43c:	bf 90       	pop	r11
 43e:	af 90       	pop	r10
 440:	9f 90       	pop	r9
 442:	8f 90       	pop	r8
 444:	7f 90       	pop	r7
 446:	6f 90       	pop	r6
 448:	5f 90       	pop	r5
 44a:	08 95       	ret

0000044c <__vector_18>:
}

	

ISR(USART_RX_vect)
{
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	2f 93       	push	r18
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	ef 93       	push	r30
 45e:	ff 93       	push	r31
	rxBuffer[rxWritePos] = UDR0;
 460:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rxWritePos>
 464:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rxWritePos+0x1>
 468:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 46c:	fc 01       	movw	r30, r24
 46e:	ee 5d       	subi	r30, 0xDE	; 222
 470:	fe 4f       	sbci	r31, 0xFE	; 254
 472:	20 83       	st	Z, r18
	//UDR0 = 'E';
	//UDR0 = rxBuffer[rxWritePos];
	rxWritePos++;
 474:	01 96       	adiw	r24, 0x01	; 1
	
	if(rxWritePos >= READ_BUFFER_SIZE)
 476:	80 31       	cpi	r24, 0x10	; 16
 478:	91 05       	cpc	r25, r1
 47a:	2c f4       	brge	.+10     	; 0x486 <__vector_18+0x3a>
ISR(USART_RX_vect)
{
	rxBuffer[rxWritePos] = UDR0;
	//UDR0 = 'E';
	//UDR0 = rxBuffer[rxWritePos];
	rxWritePos++;
 47c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <rxWritePos+0x1>
 480:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rxWritePos>
 484:	04 c0       	rjmp	.+8      	; 0x48e <__vector_18+0x42>
	
	if(rxWritePos >= READ_BUFFER_SIZE)
	{
		rxWritePos = 0;
 486:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rxWritePos+0x1>
 48a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rxWritePos>
	}
}
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <strcpy>:
 4a2:	fb 01       	movw	r30, r22
 4a4:	dc 01       	movw	r26, r24
 4a6:	01 90       	ld	r0, Z+
 4a8:	0d 92       	st	X+, r0
 4aa:	00 20       	and	r0, r0
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <strcpy+0x4>
 4ae:	08 95       	ret

000004b0 <_exit>:
 4b0:	f8 94       	cli

000004b2 <__stop_program>:
 4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <__stop_program>
