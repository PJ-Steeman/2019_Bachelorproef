
AlarmCentrale.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000006a2  00000736  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800208  00800208  0000073e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f5  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd9  00000000  00000000  000018f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000640  00000000  00000000  000025ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00002c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000699  00000000  00000000  00002cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f2  00000000  00000000  00003351  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	02 c3       	rjmp	.+1540   	; 0x64a <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ea       	ldi	r30, 0xA2	; 162
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 32       	cpi	r26, 0x24	; 36
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	5c d0       	rcall	.+184    	; 0x1d8 <main>
 120:	be c2       	rjmp	.+1404   	; 0x69e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <pinSetup>:
int TUIT_3 = 1;				//actief_laag
int TUIT_4 = 1;				//actief_laag

void pinSetup(void)
{
	sei();					//Enable global interupts
 124:	78 94       	sei
	TCCR1A = 0;		
 126:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0;		
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	10 82       	st	Z, r1
	
	TCCR1B |= (1 << WGM12);	//Timer in interupt mode
 130:	80 81       	ld	r24, Z
 132:	88 60       	ori	r24, 0x08	; 8
 134:	80 83       	st	Z, r24
	OCR1A = 62500 - 1;		//Telstand om 1 seconde te krijgen
 136:	83 e2       	ldi	r24, 0x23	; 35
 138:	94 ef       	ldi	r25, 0xF4	; 244
 13a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 13e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	TIMSK1 = (1<<OCIE1A);	//Interupt wanneer we aan deze waarde komen
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	
	DDRA = 0x00;			//Alle A pinnen als ingangen 
 148:	11 b8       	out	0x01, r1	; 1
	DDRB = 0B10000000;		//B7 als uitgang
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0B01010101;		//C1,C3,C5,C7 als ingang en C0,C2,C4,C6 als uitgang
 14e:	95 e5       	ldi	r25, 0x55	; 85
 150:	97 b9       	out	0x07, r25	; 7
	DDRL = 0B00000101;		//Alle L pinnen behalve L0 en L2 als ingangen
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
	
	PORTA = 0x00;			//Pull-Up weerstanden uitzetten op de A-pinnen
 158:	12 b8       	out	0x02, r1	; 2
	PORTC = 0B01010101;		//Pull-Up weerstanden uitzetten op de C-pinnen en alle uitgangen op 1 zetten
 15a:	98 b9       	out	0x08, r25	; 8
	PORTL = 0B00000101;			//Pull-Up weerstanden uitzetten op de L-pinnen en alle uitgangen op 1 zetten
 15c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 160:	08 95       	ret

00000162 <tranUitgangen>:
	
}

void tranUitgangen(int stat)
{
	if(stat)
 162:	89 2b       	or	r24, r25
 164:	21 f0       	breq	.+8      	; 0x16e <tranUitgangen+0xc>
	{
		PORTC &= 0B10101010;	//alle low-voltage transistor uitgangen op 0(ON)
 166:	88 b1       	in	r24, 0x08	; 8
 168:	8a 7a       	andi	r24, 0xAA	; 170
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	08 95       	ret
	}
	else
	{
		PORTC |= 0B01010101;	//alle low-voltage transistor uitgangen op 1(OFF)
 16e:	88 b1       	in	r24, 0x08	; 8
 170:	85 65       	ori	r24, 0x55	; 85
 172:	88 b9       	out	0x08, r24	; 8
 174:	08 95       	ret

00000176 <relayUitgangen>:
	}
}

void relayUitgangen(int stat)
{
	if(stat)
 176:	89 2b       	or	r24, r25
 178:	31 f0       	breq	.+12     	; 0x186 <relayUitgangen+0x10>
	{
		PORTL &= 0B11111010;
 17a:	eb e0       	ldi	r30, 0x0B	; 11
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	80 81       	ld	r24, Z
 180:	8a 7f       	andi	r24, 0xFA	; 250
 182:	80 83       	st	Z, r24
 184:	08 95       	ret
	}
	else
	{
		PORTL |= 0B00000101;
 186:	eb e0       	ldi	r30, 0x0B	; 11
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	80 81       	ld	r24, Z
 18c:	85 60       	ori	r24, 0x05	; 5
 18e:	80 83       	st	Z, r24
 190:	08 95       	ret

00000192 <alarmGaatAf>:
	}
}

void alarmGaatAf(int stat)
{
	if (stat)
 192:	89 2b       	or	r24, r25
 194:	41 f0       	breq	.+16     	; 0x1a6 <alarmGaatAf+0x14>
	{
		LED_ON
 196:	2f 9a       	sbi	0x05, 7	; 5
		tranUitgangen(1);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	e2 df       	rcall	.-60     	; 0x162 <tranUitgangen>
		relayUitgangen(1);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	e9 cf       	rjmp	.-46     	; 0x176 <relayUitgangen>
 1a4:	08 95       	ret
		//SIRENE_ON
		//SEND_SMS
	} 
	else
	{
		LED_OFF
 1a6:	2f 98       	cbi	0x05, 7	; 5
		tranUitgangen(0);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	da df       	rcall	.-76     	; 0x162 <tranUitgangen>
		relayUitgangen(0);
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	e1 cf       	rjmp	.-62     	; 0x176 <relayUitgangen>
 1b4:	08 95       	ret

000001b6 <disable_enableAlarm>:
 1b6:	89 2b       	or	r24, r25
	}
}

void disable_enableAlarm(int stat)
{
	if (stat)
 1b8:	39 f0       	breq	.+14     	; 0x1c8 <disable_enableAlarm+0x12>
	{
		AlarmStatus = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <AlarmStatus+0x1>
 1c2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <AlarmStatus>
 1c6:	08 95       	ret
	}
	else
	{
		AlarmStatus = 0;
 1c8:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <AlarmStatus+0x1>
 1cc:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <AlarmStatus>
		alarmGaatAf(0);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	de cf       	rjmp	.-68     	; 0x192 <alarmGaatAf>
 1d6:	08 95       	ret

000001d8 <main>:
	}
}

int main(void)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	c9 55       	subi	r28, 0x59	; 89
 1e2:	d1 09       	sbc	r29, r1
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
	pinSetup();
 1ee:	9a df       	rcall	.-204    	; 0x124 <pinSetup>
	
	memset(IngegevenWachtwoord,'\0',strlen(IngegevenWachtwoord));
 1f0:	e0 e2       	ldi	r30, 0x20	; 32
 1f2:	f2 e0       	ldi	r31, 0x02	; 2
 1f4:	01 90       	ld	r0, Z+
 1f6:	00 20       	and	r0, r0
 1f8:	e9 f7       	brne	.-6      	; 0x1f4 <main+0x1c>
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	af 01       	movw	r20, r30
 1fe:	40 52       	subi	r20, 0x20	; 32
 200:	52 40       	sbci	r21, 0x02	; 2
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	80 e2       	ldi	r24, 0x20	; 32
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	39 d2       	rcall	.+1138   	; 0x67e <memset>
 20c:	4e 01       	movw	r8, r28
 20e:	85 e2       	ldi	r24, 0x25	; 37
 210:	88 0e       	add	r8, r24
 212:	91 1c       	adc	r9, r1
 214:	fe 01       	movw	r30, r28
 216:	31 96       	adiw	r30, 0x01	; 1
	int kansen = 3;

	struct zone Zones[NR_ZONES];
	for(int t = 0; t < NR_ZONES; t++){
		for(int y = 0; y < NR_SENSOREN_PER_ZONE; y++){
			Zones[t].sensor[y] = LEEG;
 218:	13 82       	std	Z+3, r1	; 0x03
 21a:	12 82       	std	Z+2, r1	; 0x02
 21c:	15 82       	std	Z+5, r1	; 0x05
 21e:	14 82       	std	Z+4, r1	; 0x04
 220:	17 82       	std	Z+7, r1	; 0x07
 222:	16 82       	std	Z+6, r1	; 0x06
 224:	11 86       	std	Z+9, r1	; 0x09
 226:	10 86       	std	Z+8, r1	; 0x08
 228:	13 86       	std	Z+11, r1	; 0x0b
 22a:	12 86       	std	Z+10, r1	; 0x0a
 22c:	3c 96       	adiw	r30, 0x0c	; 12
	
	memset(IngegevenWachtwoord,'\0',strlen(IngegevenWachtwoord));
	int kansen = 3;

	struct zone Zones[NR_ZONES];
	for(int t = 0; t < NR_ZONES; t++){
 22e:	8e 16       	cp	r8, r30
 230:	9f 06       	cpc	r9, r31
 232:	91 f7       	brne	.-28     	; 0x218 <main+0x40>
			Zones[t].sensor[y] = LEEG;
		}
	}
	
	//keuken
	Zones[0].id = 0;
 234:	1a 82       	std	Y+2, r1	; 0x02
 236:	19 82       	std	Y+1, r1	; 0x01
	Zones[0].sensor[0] = 1;
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	3c 83       	std	Y+4, r19	; 0x04
 23e:	2b 83       	std	Y+3, r18	; 0x03
	Zones[0].sensor[1] = 2;
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	9e 83       	std	Y+6, r25	; 0x06
 246:	8d 83       	std	Y+5, r24	; 0x05
	Zones[0].sensor[2] = 3;
 248:	43 e0       	ldi	r20, 0x03	; 3
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	58 87       	std	Y+8, r21	; 0x08
 24e:	4f 83       	std	Y+7, r20	; 0x07
	//living
	Zones[1].id = 1;
 250:	3e 87       	std	Y+14, r19	; 0x0e
 252:	2d 87       	std	Y+13, r18	; 0x0d
	Zones[1].sensor[0] = 4;
 254:	24 e0       	ldi	r18, 0x04	; 4
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	38 8b       	std	Y+16, r19	; 0x10
 25a:	2f 87       	std	Y+15, r18	; 0x0f
	Zones[1].sensor[1] = 5;
 25c:	25 e0       	ldi	r18, 0x05	; 5
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	3a 8b       	std	Y+18, r19	; 0x12
 262:	29 8b       	std	Y+17, r18	; 0x11
	Zones[1].sensor[2] = 6;
 264:	26 e0       	ldi	r18, 0x06	; 6
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	3c 8b       	std	Y+20, r19	; 0x14
 26a:	2b 8b       	std	Y+19, r18	; 0x13
	//gang
	Zones[2].id = 2;
 26c:	9a 8f       	std	Y+26, r25	; 0x1a
 26e:	89 8f       	std	Y+25, r24	; 0x19
	Zones[2].sensor[0] = 7;
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	9c 8f       	std	Y+28, r25	; 0x1c
 276:	8b 8f       	std	Y+27, r24	; 0x1b
	Zones[2].sensor[1] = 8;
 278:	88 e0       	ldi	r24, 0x08	; 8
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	9e 8f       	std	Y+30, r25	; 0x1e
 27e:	8d 8f       	std	Y+29, r24	; 0x1d

	struct links Verbindingen[NR_AANLIGGENDE_ZONES];
	//keuken <-> living
	Verbindingen[0].aanliggend[0] = Zones[0];
 280:	8c e0       	ldi	r24, 0x0C	; 12
 282:	fe 01       	movw	r30, r28
 284:	31 96       	adiw	r30, 0x01	; 1
 286:	de 01       	movw	r26, r28
 288:	95 96       	adiw	r26, 0x25	; 37
 28a:	01 90       	ld	r0, Z+
 28c:	0d 92       	st	X+, r0
 28e:	8a 95       	dec	r24
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0xb2>
	Verbindingen[0].aanliggend[1] = Zones[1];
 292:	8c e0       	ldi	r24, 0x0C	; 12
 294:	fe 01       	movw	r30, r28
 296:	3d 96       	adiw	r30, 0x0d	; 13
 298:	de 01       	movw	r26, r28
 29a:	d1 96       	adiw	r26, 0x31	; 49
 29c:	01 90       	ld	r0, Z+
 29e:	0d 92       	st	X+, r0
 2a0:	8a 95       	dec	r24
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0xc4>
	//living <-> gang
	Verbindingen[1].aanliggend[0] = Zones[1];
 2a4:	8c e0       	ldi	r24, 0x0C	; 12
 2a6:	fe 01       	movw	r30, r28
 2a8:	3d 96       	adiw	r30, 0x0d	; 13
 2aa:	de 01       	movw	r26, r28
 2ac:	dd 96       	adiw	r26, 0x3d	; 61
 2ae:	01 90       	ld	r0, Z+
 2b0:	0d 92       	st	X+, r0
 2b2:	8a 95       	dec	r24
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0xd6>
	Verbindingen[1].aanliggend[1] = Zones[2];
 2b6:	8c e0       	ldi	r24, 0x0C	; 12
 2b8:	fe 01       	movw	r30, r28
 2ba:	79 96       	adiw	r30, 0x19	; 25
 2bc:	de 01       	movw	r26, r28
 2be:	a7 5b       	subi	r26, 0xB7	; 183
 2c0:	bf 4f       	sbci	r27, 0xFF	; 255
 2c2:	01 90       	ld	r0, Z+
 2c4:	0d 92       	st	X+, r0
 2c6:	8a 95       	dec	r24
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <main+0xea>

	//controle paneel staat in de keuken
	struct zone VorigeBeweging = Zones[0];
	struct zone HuidigeBeweging = Zones[0];
 2ca:	00 e0       	ldi	r16, 0x00	; 0
 2cc:	10 e0       	ldi	r17, 0x00	; 0
	//living <-> gang
	Verbindingen[1].aanliggend[0] = Zones[1];
	Verbindingen[1].aanliggend[1] = Zones[2];

	//controle paneel staat in de keuken
	struct zone VorigeBeweging = Zones[0];
 2ce:	e1 2c       	mov	r14, r1
 2d0:	f1 2c       	mov	r15, r1
int main(void)
{
	pinSetup();
	
	memset(IngegevenWachtwoord,'\0',strlen(IngegevenWachtwoord));
	int kansen = 3;
 2d2:	a3 e0       	ldi	r26, 0x03	; 3
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	67 96       	adiw	r28, 0x17	; 23
 2d8:	bf af       	std	Y+63, r27	; 0x3f
 2da:	ae af       	std	Y+62, r26	; 0x3e
 2dc:	67 97       	sbiw	r28, 0x17	; 23

	int gelinked;
			
    while (1)	//oneindige lus
    {
		PIR[1]		= !(PINA & (1<<PINA0));		//PIN 22
 2de:	0f 2e       	mov	r0, r31
 2e0:	f8 e0       	ldi	r31, 0x08	; 8
 2e2:	cf 2e       	mov	r12, r31
 2e4:	f2 e0       	ldi	r31, 0x02	; 2
 2e6:	df 2e       	mov	r13, r31
 2e8:	f0 2d       	mov	r31, r0
 2ea:	aa 24       	eor	r10, r10
 2ec:	a3 94       	inc	r10
 2ee:	b1 2c       	mov	r11, r1
 2f0:	71 2c       	mov	r7, r1
 2f2:	61 2c       	mov	r6, r1
		PIR[5]		= !(PINC & (1<<PINC7));		//PIN 30
		PIR[6]		= !(PINC & (1<<PINC5));		//PIN 32
		PIR[7]		= !(PINC & (1<<PINC3));		//PIN 34
		PIR[8]		= !(PINC & (1<<PINC1));		//PIN 36
		
		TAMPER		= !(PINL & (1<<PINL3));		//PIN 46
 2f4:	0f 2e       	mov	r0, r31
 2f6:	f9 e0       	ldi	r31, 0x09	; 9
 2f8:	4f 2e       	mov	r4, r31
 2fa:	55 24       	eor	r5, r5
 2fc:	53 94       	inc	r5
 2fe:	f0 2d       	mov	r31, r0
			{
				START_TIMER;
			}
		}

		if (IngegevenWachtwoord[3] != '\0' && AlarmStatus)
 300:	0f 2e       	mov	r0, r31
 302:	f0 e2       	ldi	r31, 0x20	; 32
 304:	2f 2e       	mov	r2, r31
 306:	f2 e0       	ldi	r31, 0x02	; 2
 308:	3f 2e       	mov	r3, r31
 30a:	f0 2d       	mov	r31, r0
						{
							teller++;
						}
						if(teller == 2)
						{
							gelinked = 1;
 30c:	68 96       	adiw	r28, 0x18	; 24
 30e:	af ae       	std	Y+63, r10	; 0x3f
 310:	68 97       	sbiw	r28, 0x18	; 24
 312:	69 96       	adiw	r28, 0x19	; 25
 314:	bf ae       	std	Y+63, r11	; 0x3f
 316:	69 97       	sbiw	r28, 0x19	; 25

	int gelinked;
			
    while (1)	//oneindige lus
    {
		PIR[1]		= !(PINA & (1<<PINA0));		//PIN 22
 318:	80 b1       	in	r24, 0x00	; 0
 31a:	2a 2d       	mov	r18, r10
 31c:	9b 2d       	mov	r25, r11
 31e:	38 2f       	mov	r19, r24
 320:	31 70       	andi	r19, 0x01	; 1
 322:	80 ff       	sbrs	r24, 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <main+0x152>
 326:	27 2d       	mov	r18, r7
 328:	96 2d       	mov	r25, r6
 32a:	f6 01       	movw	r30, r12
 32c:	22 83       	std	Z+2, r18	; 0x02
 32e:	93 83       	std	Z+3, r25	; 0x03
		PIR[2]		= !(PINA & (1<<PINA2));		//PIN 24
 330:	80 b1       	in	r24, 0x00	; 0
 332:	2a 2d       	mov	r18, r10
 334:	9b 2d       	mov	r25, r11
 336:	48 2f       	mov	r20, r24
 338:	44 70       	andi	r20, 0x04	; 4
 33a:	82 ff       	sbrs	r24, 2
 33c:	02 c0       	rjmp	.+4      	; 0x342 <main+0x16a>
 33e:	27 2d       	mov	r18, r7
 340:	96 2d       	mov	r25, r6
 342:	d6 01       	movw	r26, r12
 344:	14 96       	adiw	r26, 0x04	; 4
 346:	2c 93       	st	X, r18
 348:	14 97       	sbiw	r26, 0x04	; 4
 34a:	15 96       	adiw	r26, 0x05	; 5
 34c:	9c 93       	st	X, r25
		PIR[3]		= !(PINA & (1<<PINA4));		//PIN 26
 34e:	80 b1       	in	r24, 0x00	; 0
 350:	2a 2d       	mov	r18, r10
 352:	9b 2d       	mov	r25, r11
 354:	58 2f       	mov	r21, r24
 356:	50 71       	andi	r21, 0x10	; 16
 358:	84 ff       	sbrs	r24, 4
 35a:	02 c0       	rjmp	.+4      	; 0x360 <main+0x188>
 35c:	27 2d       	mov	r18, r7
 35e:	96 2d       	mov	r25, r6
 360:	f6 01       	movw	r30, r12
 362:	26 83       	std	Z+6, r18	; 0x06
 364:	97 83       	std	Z+7, r25	; 0x07
		PIR[4]		= !(PINA & (1<<PINA6));		//PIN 28
 366:	80 b1       	in	r24, 0x00	; 0
 368:	2a 2d       	mov	r18, r10
 36a:	9b 2d       	mov	r25, r11
 36c:	68 2f       	mov	r22, r24
 36e:	60 74       	andi	r22, 0x40	; 64
 370:	86 ff       	sbrs	r24, 6
 372:	02 c0       	rjmp	.+4      	; 0x378 <main+0x1a0>
 374:	27 2d       	mov	r18, r7
 376:	96 2d       	mov	r25, r6
 378:	d6 01       	movw	r26, r12
 37a:	18 96       	adiw	r26, 0x08	; 8
 37c:	2c 93       	st	X, r18
 37e:	18 97       	sbiw	r26, 0x08	; 8
 380:	19 96       	adiw	r26, 0x09	; 9
 382:	9c 93       	st	X, r25
 384:	19 97       	sbiw	r26, 0x09	; 9
		PIR[5]		= !(PINC & (1<<PINC7));		//PIN 30
 386:	26 b1       	in	r18, 0x06	; 6
 388:	82 2f       	mov	r24, r18
 38a:	02 2e       	mov	r0, r18
 38c:	00 0c       	add	r0, r0
 38e:	99 0b       	sbc	r25, r25
 390:	80 95       	com	r24
 392:	90 95       	com	r25
 394:	89 2f       	mov	r24, r25
 396:	88 1f       	adc	r24, r24
 398:	88 27       	eor	r24, r24
 39a:	88 1f       	adc	r24, r24
 39c:	1a 96       	adiw	r26, 0x0a	; 10
 39e:	8c 93       	st	X, r24
 3a0:	1a 97       	sbiw	r26, 0x0a	; 10
 3a2:	1b 96       	adiw	r26, 0x0b	; 11
 3a4:	1c 92       	st	X, r1
		PIR[6]		= !(PINC & (1<<PINC5));		//PIN 32
 3a6:	86 b1       	in	r24, 0x06	; 6
 3a8:	ea 2d       	mov	r30, r10
 3aa:	9b 2d       	mov	r25, r11
 3ac:	78 2f       	mov	r23, r24
 3ae:	70 72       	andi	r23, 0x20	; 32
 3b0:	85 ff       	sbrs	r24, 5
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <main+0x1e0>
 3b4:	e7 2d       	mov	r30, r7
 3b6:	96 2d       	mov	r25, r6
 3b8:	d6 01       	movw	r26, r12
 3ba:	1c 96       	adiw	r26, 0x0c	; 12
 3bc:	ec 93       	st	X, r30
 3be:	1c 97       	sbiw	r26, 0x0c	; 12
 3c0:	1d 96       	adiw	r26, 0x0d	; 13
 3c2:	9c 93       	st	X, r25
		PIR[7]		= !(PINC & (1<<PINC3));		//PIN 34
 3c4:	86 b1       	in	r24, 0x06	; 6
 3c6:	fa 2d       	mov	r31, r10
 3c8:	9b 2d       	mov	r25, r11
 3ca:	e8 2f       	mov	r30, r24
 3cc:	e8 70       	andi	r30, 0x08	; 8
 3ce:	83 ff       	sbrs	r24, 3
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <main+0x1fe>
 3d2:	f7 2d       	mov	r31, r7
 3d4:	96 2d       	mov	r25, r6
 3d6:	d6 01       	movw	r26, r12
 3d8:	1e 96       	adiw	r26, 0x0e	; 14
 3da:	fc 93       	st	X, r31
 3dc:	1e 97       	sbiw	r26, 0x0e	; 14
 3de:	1f 96       	adiw	r26, 0x0f	; 15
 3e0:	9c 93       	st	X, r25
		PIR[8]		= !(PINC & (1<<PINC1));		//PIN 36
 3e2:	86 b1       	in	r24, 0x06	; 6
 3e4:	6a 96       	adiw	r28, 0x1a	; 26
 3e6:	af ae       	std	Y+63, r10	; 0x3f
 3e8:	6a 97       	sbiw	r28, 0x1a	; 26
 3ea:	9b 2d       	mov	r25, r11
 3ec:	f8 2f       	mov	r31, r24
 3ee:	f2 70       	andi	r31, 0x02	; 2
 3f0:	81 ff       	sbrs	r24, 1
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <main+0x224>
 3f4:	6a 96       	adiw	r28, 0x1a	; 26
 3f6:	7f ae       	std	Y+63, r7	; 0x3f
 3f8:	6a 97       	sbiw	r28, 0x1a	; 26
 3fa:	96 2d       	mov	r25, r6
 3fc:	6a 96       	adiw	r28, 0x1a	; 26
 3fe:	8f ad       	ldd	r24, Y+63	; 0x3f
 400:	6a 97       	sbiw	r28, 0x1a	; 26
 402:	d6 01       	movw	r26, r12
 404:	50 96       	adiw	r26, 0x10	; 16
 406:	8c 93       	st	X, r24
 408:	50 97       	sbiw	r26, 0x10	; 16
 40a:	51 96       	adiw	r26, 0x11	; 17
 40c:	9c 93       	st	X, r25
		
		TAMPER		= !(PINL & (1<<PINL3));		//PIN 46
 40e:	d2 01       	movw	r26, r4
 410:	8c 91       	ld	r24, X
 412:	86 95       	lsr	r24
 414:	86 95       	lsr	r24
 416:	86 95       	lsr	r24
 418:	b1 e0       	ldi	r27, 0x01	; 1
 41a:	8b 27       	eor	r24, r27
 41c:	81 70       	andi	r24, 0x01	; 1
 41e:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <TAMPER>
 422:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <TAMPER+0x1>
		DAG_NACHT	= PINL & (1<<PINL1);		//PIN 48
 426:	d2 01       	movw	r26, r4
 428:	8c 91       	ld	r24, X
 42a:	82 70       	andi	r24, 0x02	; 2
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <DAG_NACHT+0x1>
 432:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <DAG_NACHT>

		//Als het alarm actief is EN 1 van de sensoren detecteerd beweging
		if ((PIR[1] || PIR[2] || PIR[3] || PIR[4] || PIR[5] || PIR[6] || PIR[7] || PIR[8]) && AlarmStatus)
 436:	33 23       	and	r19, r19
 438:	09 f4       	brne	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43a:	da c0       	rjmp	.+436    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 43c:	44 23       	and	r20, r20
 43e:	09 f4       	brne	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	d7 c0       	rjmp	.+430    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 442:	55 23       	and	r21, r21
 444:	09 f4       	brne	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 446:	d4 c0       	rjmp	.+424    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 448:	66 23       	and	r22, r22
 44a:	09 f4       	brne	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44c:	d1 c0       	rjmp	.+418    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 44e:	22 23       	and	r18, r18
 450:	0c f0       	brlt	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 452:	ce c0       	rjmp	.+412    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 454:	77 23       	and	r23, r23
 456:	09 f4       	brne	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 458:	cb c0       	rjmp	.+406    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 45a:	ee 23       	and	r30, r30
 45c:	09 f4       	brne	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	c8 c0       	rjmp	.+400    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 460:	ff 23       	and	r31, r31
 462:	09 f4       	brne	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 464:	c5 c0       	rjmp	.+394    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 466:	55 c0       	rjmp	.+170    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
			if(GEBRUIK_ZONES == 1){
				for(int i = 0; i < NR_ZONES; i++)
				{
					for(int j = 0; Zones[i].sensor[j] != LEEG; j++)
					{
						if(PIR[Zones[i].sensor[j]])
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	88 5f       	subi	r24, 0xF8	; 248
 46e:	9d 4f       	sbci	r25, 0xFD	; 253
 470:	dc 01       	movw	r26, r24
 472:	8d 91       	ld	r24, X+
 474:	9c 91       	ld	r25, X
 476:	89 2b       	or	r24, r25
 478:	21 f0       	breq	.+8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
						{
							VorigeBeweging = HuidigeBeweging;
							HuidigeBeweging = Zones[i];
 47a:	78 01       	movw	r14, r16
 47c:	da 01       	movw	r26, r20
 47e:	0d 91       	ld	r16, X+
 480:	1c 91       	ld	r17, X
		{
			//bepaal de zone van de beweging
			if(GEBRUIK_ZONES == 1){
				for(int i = 0; i < NR_ZONES; i++)
				{
					for(int j = 0; Zones[i].sensor[j] != LEEG; j++)
 482:	81 91       	ld	r24, Z+
 484:	91 91       	ld	r25, Z+
 486:	00 97       	sbiw	r24, 0x00	; 0
 488:	79 f7       	brne	.-34     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 48a:	24 5f       	subi	r18, 0xF4	; 244
 48c:	3f 4f       	sbci	r19, 0xFF	; 255
		//Als het alarm actief is EN 1 van de sensoren detecteerd beweging
		if ((PIR[1] || PIR[2] || PIR[3] || PIR[4] || PIR[5] || PIR[6] || PIR[7] || PIR[8]) && AlarmStatus)
		{
			//bepaal de zone van de beweging
			if(GEBRUIK_ZONES == 1){
				for(int i = 0; i < NR_ZONES; i++)
 48e:	82 16       	cp	r8, r18
 490:	93 06       	cpc	r9, r19
 492:	59 f4       	brne	.+22     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 494:	fe 01       	movw	r30, r28
 496:	b5 96       	adiw	r30, 0x25	; 37
 498:	af 01       	movw	r20, r30
 49a:	40 5d       	subi	r20, 0xD0	; 208
 49c:	5f 4f       	sbci	r21, 0xFF	; 255
 49e:	67 2d       	mov	r22, r7
 4a0:	76 2d       	mov	r23, r6
 4a2:	1e c0       	rjmp	.+60     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		
		TAMPER		= !(PINL & (1<<PINL3));		//PIN 46
		DAG_NACHT	= PINL & (1<<PINL1);		//PIN 48

		//Als het alarm actief is EN 1 van de sensoren detecteerd beweging
		if ((PIR[1] || PIR[2] || PIR[3] || PIR[4] || PIR[5] || PIR[6] || PIR[7] || PIR[8]) && AlarmStatus)
 4a4:	9e 01       	movw	r18, r28
 4a6:	2f 5f       	subi	r18, 0xFF	; 255
 4a8:	3f 4f       	sbci	r19, 0xFF	; 255
 4aa:	d9 01       	movw	r26, r18
		{
			//bepaal de zone van de beweging
			if(GEBRUIK_ZONES == 1){
				for(int i = 0; i < NR_ZONES; i++)
				{
					for(int j = 0; Zones[i].sensor[j] != LEEG; j++)
 4ac:	12 96       	adiw	r26, 0x02	; 2
 4ae:	8d 91       	ld	r24, X+
 4b0:	9c 91       	ld	r25, X
 4b2:	13 97       	sbiw	r26, 0x03	; 3
 4b4:	00 97       	sbiw	r24, 0x00	; 0
 4b6:	49 f3       	breq	.-46     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 4b8:	f9 01       	movw	r30, r18
 4ba:	34 96       	adiw	r30, 0x04	; 4
 4bc:	a9 01       	movw	r20, r18
 4be:	d4 cf       	rjmp	.-88     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				for(int i = 0; i < NR_AANLIGGENDE_ZONES; i++)
				{
					int teller = 0;
					for(int j = 0; j < NR_ZONES_IN_LINK; j++)
					{
						if(Verbindingen[i].aanliggend[j].id == HuidigeBeweging.id || Verbindingen[i].aanliggend[j].id == VorigeBeweging.id)
 4c0:	2e 15       	cp	r18, r14
 4c2:	3f 05       	cpc	r19, r15
 4c4:	09 f4       	brne	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
						{
							teller++;
 4c6:	01 96       	adiw	r24, 0x01	; 1
						}
						if(teller == 2)
 4c8:	02 97       	sbiw	r24, 0x02	; 2
 4ca:	31 f4       	brne	.+12     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
						{
							gelinked = 1;
 4cc:	68 96       	adiw	r28, 0x18	; 24
 4ce:	6f ad       	ldd	r22, Y+63	; 0x3f
 4d0:	68 97       	sbiw	r28, 0x18	; 24
 4d2:	69 96       	adiw	r28, 0x19	; 25
 4d4:	7f ad       	ldd	r23, Y+63	; 0x3f
 4d6:	69 97       	sbiw	r28, 0x19	; 25
 4d8:	78 96       	adiw	r30, 0x18	; 24
					}
				}

				gelinked = 0;
				//bepaal of de huidige zone en de vorige verbonden zijn
				for(int i = 0; i < NR_AANLIGGENDE_ZONES; i++)
 4da:	4e 17       	cp	r20, r30
 4dc:	5f 07       	cpc	r21, r31
 4de:	61 f0       	breq	.+24     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4e0:	df 01       	movw	r26, r30
				{
					int teller = 0;
					for(int j = 0; j < NR_ZONES_IN_LINK; j++)
					{
						if(Verbindingen[i].aanliggend[j].id == HuidigeBeweging.id || Verbindingen[i].aanliggend[j].id == VorigeBeweging.id)
 4e2:	80 81       	ld	r24, Z
 4e4:	91 81       	ldd	r25, Z+1	; 0x01
 4e6:	80 17       	cp	r24, r16
 4e8:	91 07       	cpc	r25, r17
 4ea:	09 f4       	brne	.+2      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ec:	91 c0       	rjmp	.+290    	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 4ee:	8e 15       	cp	r24, r14
 4f0:	9f 05       	cpc	r25, r15
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f4:	8a c0       	rjmp	.+276    	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 4f6:	8f c0       	rjmp	.+286    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
							gelinked = 1;
						}
					}
				}

				if(!(VorigeBeweging.id == HuidigeBeweging.id || gelinked == 1)){
 4f8:	e0 16       	cp	r14, r16
 4fa:	f1 06       	cpc	r15, r17
 4fc:	09 f4       	brne	.+2      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4fe:	7f c0       	rjmp	.+254    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 500:	61 30       	cpi	r22, 0x01	; 1
 502:	71 05       	cpc	r23, r1
 504:	09 f4       	brne	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 506:	7c c0       	rjmp	.+248    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
					START_TIMER;
 508:	e1 e8       	ldi	r30, 0x81	; 129
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	84 60       	ori	r24, 0x04	; 4
 510:	80 83       	st	Z, r24
			{
				START_TIMER;
			}
		}

		if (IngegevenWachtwoord[3] != '\0' && AlarmStatus)
 512:	d1 01       	movw	r26, r2
 514:	13 96       	adiw	r26, 0x03	; 3
 516:	8c 91       	ld	r24, X
 518:	88 23       	and	r24, r24
 51a:	09 f4       	brne	.+2      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51c:	41 c0       	rjmp	.+130    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 51e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <AlarmStatus>
 522:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <AlarmStatus+0x1>
 526:	89 2b       	or	r24, r25
 528:	09 f4       	brne	.+2      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 52a:	49 c0       	rjmp	.+146    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
		{
			//als het ingegeven wachtwoord overeenkomt met het juiste wachtwoord
			if(strcmp(WACHTWOORD, IngegevenWachtwoord) == 0){
 52c:	b1 01       	movw	r22, r2
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	92 e0       	ldi	r25, 0x02	; 2
 532:	ac d0       	rcall	.+344    	; 0x68c <strcmp>
 534:	89 2b       	or	r24, r25
 536:	81 f4       	brne	.+32     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				{
					disable_enableAlarm(0);
 538:	87 2d       	mov	r24, r7
 53a:	96 2d       	mov	r25, r6
 53c:	3c de       	rcall	.-904    	; 0x1b6 <disable_enableAlarm>
 53e:	f1 01       	movw	r30, r2
					memset(IngegevenWachtwoord,'\0',strlen(IngegevenWachtwoord));
 540:	01 90       	ld	r0, Z+
 542:	00 20       	and	r0, r0
 544:	e9 f7       	brne	.-6      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 546:	31 97       	sbiw	r30, 0x01	; 1
 548:	af 01       	movw	r20, r30
 54a:	40 52       	subi	r20, 0x20	; 32
 54c:	52 40       	sbci	r21, 0x02	; 2
 54e:	67 2d       	mov	r22, r7
 550:	76 2d       	mov	r23, r6
 552:	c1 01       	movw	r24, r2
 554:	94 d0       	rcall	.+296    	; 0x67e <memset>
 556:	15 c0       	rjmp	.+42     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 558:	f1 01       	movw	r30, r2
				}
			}
			else
			{
				memset(IngegevenWachtwoord,'\0',strlen(IngegevenWachtwoord));
 55a:	01 90       	ld	r0, Z+
 55c:	00 20       	and	r0, r0
 55e:	e9 f7       	brne	.-6      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 560:	31 97       	sbiw	r30, 0x01	; 1
 562:	af 01       	movw	r20, r30
 564:	40 52       	subi	r20, 0x20	; 32
 566:	52 40       	sbci	r21, 0x02	; 2
 568:	67 2d       	mov	r22, r7
 56a:	76 2d       	mov	r23, r6
 56c:	c1 01       	movw	r24, r2
 56e:	87 d0       	rcall	.+270    	; 0x67e <memset>
 570:	67 96       	adiw	r28, 0x17	; 23
				kansen --;
 572:	ee ad       	ldd	r30, Y+62	; 0x3e
 574:	ff ad       	ldd	r31, Y+63	; 0x3f
 576:	67 97       	sbiw	r28, 0x17	; 23
 578:	31 97       	sbiw	r30, 0x01	; 1
 57a:	67 96       	adiw	r28, 0x17	; 23
 57c:	ff af       	std	Y+63, r31	; 0x3f
 57e:	ee af       	std	Y+62, r30	; 0x3e
 580:	67 97       	sbiw	r28, 0x17	; 23
 582:	67 96       	adiw	r28, 0x17	; 23
			}

			if(kansen == 0)
 584:	8e ad       	ldd	r24, Y+62	; 0x3e
 586:	9f ad       	ldd	r25, Y+63	; 0x3f
 588:	67 97       	sbiw	r28, 0x17	; 23
 58a:	89 2b       	or	r24, r25
 58c:	49 f4       	brne	.+18     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			{
				alarmGaatAf(1);
 58e:	8a 2d       	mov	r24, r10
 590:	9b 2d       	mov	r25, r11
 592:	ff dd       	rcall	.-1026   	; 0x192 <alarmGaatAf>
 594:	a3 e0       	ldi	r26, 0x03	; 3
				kansen = 3;
 596:	b0 e0       	ldi	r27, 0x00	; 0
 598:	67 96       	adiw	r28, 0x17	; 23
 59a:	bf af       	std	Y+63, r27	; 0x3f
 59c:	ae af       	std	Y+62, r26	; 0x3e
 59e:	67 97       	sbiw	r28, 0x17	; 23
 5a0:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TAMPER>
			}
		}
		
		if(TAMPER && AlarmStatus){
 5a4:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TAMPER+0x1>
 5a8:	89 2b       	or	r24, r25
 5aa:	49 f0       	breq	.+18     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5ac:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <AlarmStatus>
 5b0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <AlarmStatus+0x1>
 5b4:	89 2b       	or	r24, r25
 5b6:	19 f0       	breq	.+6      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
			alarmGaatAf(1);
 5b8:	8a 2d       	mov	r24, r10
 5ba:	9b 2d       	mov	r25, r11
 5bc:	ea dd       	rcall	.-1068   	; 0x192 <alarmGaatAf>
 5be:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <wachtTeller>
		}
		
		if (wachtTeller == WACHT_PERIODE){
 5c2:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <wachtTeller+0x1>
 5c6:	0f 97       	sbiw	r24, 0x0f	; 15
 5c8:	09 f0       	breq	.+2      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5ca:	a6 ce       	rjmp	.-692    	; 0x318 <main+0x140>
 5cc:	e1 e8       	ldi	r30, 0x81	; 129
			STOP_TIMER;
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	88 7f       	andi	r24, 0xF8	; 248
 5d4:	80 83       	st	Z, r24
			CLEAR_TIMER;
 5d6:	a4 e8       	ldi	r26, 0x84	; 132
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	11 96       	adiw	r26, 0x01	; 1
 5dc:	1c 92       	st	X, r1
 5de:	1e 92       	st	-X, r1
			alarmGaatAf(1);
 5e0:	8a 2d       	mov	r24, r10
 5e2:	9b 2d       	mov	r25, r11
 5e4:	d6 dd       	rcall	.-1108   	; 0x192 <alarmGaatAf>
 5e6:	70 92 1e 02 	sts	0x021E, r7	; 0x80021e <wachtTeller>
			wachtTeller = 0;
 5ea:	60 92 1f 02 	sts	0x021F, r6	; 0x80021f <wachtTeller+0x1>
 5ee:	94 ce       	rjmp	.-728    	; 0x318 <main+0x140>
 5f0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <AlarmStatus>
		
		TAMPER		= !(PINL & (1<<PINL3));		//PIN 46
		DAG_NACHT	= PINL & (1<<PINL1);		//PIN 48

		//Als het alarm actief is EN 1 van de sensoren detecteerd beweging
		if ((PIR[1] || PIR[2] || PIR[3] || PIR[4] || PIR[5] || PIR[6] || PIR[7] || PIR[8]) && AlarmStatus)
 5f4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <AlarmStatus+0x1>
 5f8:	89 2b       	or	r24, r25
 5fa:	c1 f0       	breq	.+48     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 5fc:	53 cf       	rjmp	.-346    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 5fe:	78 01       	movw	r14, r16
 600:	f1 01       	movw	r30, r2
			{
				START_TIMER;
			}
		}

		if (IngegevenWachtwoord[3] != '\0' && AlarmStatus)
 602:	83 81       	ldd	r24, Z+3	; 0x03
 604:	81 11       	cpse	r24, r1
 606:	92 cf       	rjmp	.-220    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 608:	18 c0       	rjmp	.+48     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 60a:	80 e0       	ldi	r24, 0x00	; 0
				for(int i = 0; i < NR_AANLIGGENDE_ZONES; i++)
				{
					int teller = 0;
					for(int j = 0; j < NR_ZONES_IN_LINK; j++)
					{
						if(Verbindingen[i].aanliggend[j].id == HuidigeBeweging.id || Verbindingen[i].aanliggend[j].id == VorigeBeweging.id)
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	05 c0       	rjmp	.+10     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 610:	81 e0       	ldi	r24, 0x01	; 1
						{
							teller++;
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	1c 96       	adiw	r26, 0x0c	; 12
				for(int i = 0; i < NR_AANLIGGENDE_ZONES; i++)
				{
					int teller = 0;
					for(int j = 0; j < NR_ZONES_IN_LINK; j++)
					{
						if(Verbindingen[i].aanliggend[j].id == HuidigeBeweging.id || Verbindingen[i].aanliggend[j].id == VorigeBeweging.id)
 61c:	2d 91       	ld	r18, X+
 61e:	3c 91       	ld	r19, X
 620:	1d 97       	sbiw	r26, 0x0d	; 13
 622:	20 17       	cp	r18, r16
 624:	31 07       	cpc	r19, r17
 626:	09 f0       	breq	.+2      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 628:	4b cf       	rjmp	.-362    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 62a:	4d cf       	rjmp	.-358    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 62c:	d1 01       	movw	r26, r2
			{
				START_TIMER;
			}
		}

		if (IngegevenWachtwoord[3] != '\0' && AlarmStatus)
 62e:	13 96       	adiw	r26, 0x03	; 3
 630:	8c 91       	ld	r24, X
 632:	88 23       	and	r24, r24
 634:	09 f4       	brne	.+2      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 636:	b4 cf       	rjmp	.-152    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 638:	c2 cf       	rjmp	.-124    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 63a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TAMPER>
				alarmGaatAf(1);
				kansen = 3;
			}
		}
		
		if(TAMPER && AlarmStatus){
 63e:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TAMPER+0x1>
 642:	89 2b       	or	r24, r25
 644:	09 f0       	breq	.+2      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 646:	b8 cf       	rjmp	.-144    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 648:	ba cf       	rjmp	.-140    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>

0000064a <__vector_17>:
 64a:	1f 92       	push	r1
		
	}
}

//INTERUPT ROUTINE
ISR(TIMER1_COMPA_vect){
 64c:	0f 92       	push	r0
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	0f 92       	push	r0
 652:	11 24       	eor	r1, r1
 654:	8f 93       	push	r24
 656:	9f 93       	push	r25
	wachtTeller ++;
 658:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <wachtTeller>
 65c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <wachtTeller+0x1>
 660:	01 96       	adiw	r24, 0x01	; 1
 662:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <wachtTeller+0x1>
 666:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <wachtTeller>
	LED_TOGGLE;		
 66a:	85 b1       	in	r24, 0x05	; 5
 66c:	80 58       	subi	r24, 0x80	; 128
 66e:	85 b9       	out	0x05, r24	; 5
}
 670:	9f 91       	pop	r25
 672:	8f 91       	pop	r24
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <memset>:
 67e:	dc 01       	movw	r26, r24
 680:	01 c0       	rjmp	.+2      	; 0x684 <memset+0x6>
 682:	6d 93       	st	X+, r22
 684:	41 50       	subi	r20, 0x01	; 1
 686:	50 40       	sbci	r21, 0x00	; 0
 688:	e0 f7       	brcc	.-8      	; 0x682 <memset+0x4>
 68a:	08 95       	ret

0000068c <strcmp>:
 68c:	fb 01       	movw	r30, r22
 68e:	dc 01       	movw	r26, r24
 690:	8d 91       	ld	r24, X+
 692:	01 90       	ld	r0, Z+
 694:	80 19       	sub	r24, r0
 696:	01 10       	cpse	r0, r1
 698:	d9 f3       	breq	.-10     	; 0x690 <strcmp+0x4>
 69a:	99 0b       	sbc	r25, r25
 69c:	08 95       	ret

0000069e <_exit>:
 69e:	f8 94       	cli

000006a0 <__stop_program>:
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <__stop_program>
