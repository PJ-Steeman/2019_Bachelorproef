
AlarmCentrale - Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000026e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800208  00800208  0000030a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e72  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c82  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044c  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000022fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062b  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000154  00000000  00000000  000029bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002b0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	d3 c0       	rjmp	.+422    	; 0x20c <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e6       	ldi	r30, 0x6E	; 110
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 32       	cpi	r26, 0x2C	; 44
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	5c d0       	rcall	.+184    	; 0x1d8 <main>
 120:	a4 c0       	rjmp	.+328    	; 0x26a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <startVerzenden>:
		}
	}
}

void startVerzenden()
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	cli();
 128:	f8 94       	cli
 12a:	a0 e0       	ldi	r26, 0x00	; 0
 12c:	b2 e0       	ldi	r27, 0x02	; 2
	for (int t=0; t<strlen(antwoord); t++)
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ed 01       	movw	r28, r26
	{
		UDR0 = antwoord[t];
 134:	46 ec       	ldi	r20, 0xC6	; 198
 136:	50 e0       	ldi	r21, 0x00	; 0
}

void startVerzenden()
{
	cli();
	for (int t=0; t<strlen(antwoord); t++)
 138:	0a c0       	rjmp	.+20     	; 0x14e <startVerzenden+0x2a>
	{
		UDR0 = antwoord[t];
 13a:	2d 91       	ld	r18, X+
 13c:	fa 01       	movw	r30, r20
 13e:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	ef e1       	ldi	r30, 0x1F	; 31
 142:	fe e4       	ldi	r31, 0x4E	; 78
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <startVerzenden+0x20>
 148:	00 c0       	rjmp	.+0      	; 0x14a <startVerzenden+0x26>
 14a:	00 00       	nop
}

void startVerzenden()
{
	cli();
	for (int t=0; t<strlen(antwoord); t++)
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	fe 01       	movw	r30, r28
 150:	01 90       	ld	r0, Z+
 152:	00 20       	and	r0, r0
 154:	e9 f7       	brne	.-6      	; 0x150 <startVerzenden+0x2c>
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	e0 50       	subi	r30, 0x00	; 0
 15a:	f2 40       	sbci	r31, 0x02	; 2
 15c:	8e 17       	cp	r24, r30
 15e:	9f 07       	cpc	r25, r31
 160:	60 f3       	brcs	.-40     	; 0x13a <startVerzenden+0x16>
	{
		UDR0 = antwoord[t];
		_delay_ms(5);
	}
	sei();
 162:	78 94       	sei
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <clear_buffer>:


void clear_buffer()
{
	memset(rxBuffer, '\0', sizeof(rxBuffer));
 16a:	80 e1       	ldi	r24, 0x10	; 16
 16c:	ec e0       	ldi	r30, 0x0C	; 12
 16e:	f2 e0       	ldi	r31, 0x02	; 2
 170:	df 01       	movw	r26, r30
 172:	1d 92       	st	X+, r1
 174:	8a 95       	dec	r24
 176:	e9 f7       	brne	.-6      	; 0x172 <clear_buffer+0x8>
	rxReadPos = 0;
 178:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <rxReadPos+0x1>
 17c:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <rxReadPos>
	rxWritePos = 0;
 180:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__data_end+0x1>
 184:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end>
	memset(antwoord, '\0', sizeof(antwoord));
 188:	88 e0       	ldi	r24, 0x08	; 8
 18a:	e0 e0       	ldi	r30, 0x00	; 0
 18c:	f2 e0       	ldi	r31, 0x02	; 2
 18e:	df 01       	movw	r26, r30
 190:	1d 92       	st	X+, r1
 192:	8a 95       	dec	r24
 194:	e9 f7       	brne	.-6      	; 0x190 <clear_buffer+0x26>
 196:	08 95       	ret

00000198 <getChar>:

char getChar(void)
{
	char ret = '\0';
	
	if(rxReadPos != rxWritePos)
 198:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <rxReadPos>
 19c:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <rxReadPos+0x1>
 1a0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 1a4:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 1a8:	28 17       	cp	r18, r24
 1aa:	39 07       	cpc	r19, r25
 1ac:	99 f0       	breq	.+38     	; 0x1d4 <getChar+0x3c>
	{
		ret = rxBuffer[rxReadPos];
 1ae:	f9 01       	movw	r30, r18
 1b0:	e4 5f       	subi	r30, 0xF4	; 244
 1b2:	fd 4f       	sbci	r31, 0xFD	; 253
 1b4:	80 81       	ld	r24, Z
		
		rxReadPos++;
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255
		
		if(rxReadPos >= READ_BUFFER_SIZE)
 1ba:	20 31       	cpi	r18, 0x10	; 16
 1bc:	31 05       	cpc	r19, r1
 1be:	2c f4       	brge	.+10     	; 0x1ca <getChar+0x32>
	
	if(rxReadPos != rxWritePos)
	{
		ret = rxBuffer[rxReadPos];
		
		rxReadPos++;
 1c0:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <rxReadPos+0x1>
 1c4:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <rxReadPos>
 1c8:	08 95       	ret
		
		if(rxReadPos >= READ_BUFFER_SIZE)
		{
			rxReadPos = 0;
 1ca:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <rxReadPos+0x1>
 1ce:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <rxReadPos>
 1d2:	08 95       	ret
	memset(antwoord, '\0', sizeof(antwoord));
}

char getChar(void)
{
	char ret = '\0';
 1d4:	80 e0       	ldi	r24, 0x00	; 0
		{
			rxReadPos = 0;
		}
	}
	return ret;
}
 1d6:	08 95       	ret

000001d8 <main>:
void clear_buffer();
char getChar(void);

int main(void)
{
	UBRR0H = (BRC >> 8);
 1d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = BRC;
 1dc:	80 e1       	ldi	r24, 0x10	; 16
 1de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0);
 1e2:	88 e9       	ldi	r24, 0x98	; 152
 1e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	
	DDRB = 0B10000000;
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	84 b9       	out	0x04, r24	; 4

	
	sei();
 1f2:	78 94       	sei
	clear_buffer();
 1f4:	ba df       	rcall	.-140    	; 0x16a <clear_buffer>
	{
		char c = getChar();
		
		if(c == '\n')
		{
			UDR0 = 'W';
 1f6:	06 ec       	ldi	r16, 0xC6	; 198
 1f8:	10 e0       	ldi	r17, 0x00	; 0
	
	sei();
	clear_buffer();
	while(1)
	{
		char c = getChar();
 1fa:	c7 e5       	ldi	r28, 0x57	; 87
 1fc:	cd df       	rcall	.-102    	; 0x198 <getChar>
		
		if(c == '\n')
 1fe:	8a 30       	cpi	r24, 0x0A	; 10
 200:	e9 f7       	brne	.-6      	; 0x1fc <main+0x24>
		{
			UDR0 = 'W';
 202:	f8 01       	movw	r30, r16
			startVerzenden();
 204:	c0 83       	st	Z, r28
 206:	8e df       	rcall	.-228    	; 0x124 <startVerzenden>
			clear_buffer();
 208:	b0 df       	rcall	.-160    	; 0x16a <clear_buffer>
 20a:	f8 cf       	rjmp	.-16     	; 0x1fc <main+0x24>

0000020c <__vector_25>:
 20c:	1f 92       	push	r1
	}
	return ret;
}

ISR(USART0_RX_vect)
{
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	0b b6       	in	r0, 0x3b	; 59
 218:	0f 92       	push	r0
 21a:	2f 93       	push	r18
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
	rxBuffer[rxWritePos] = UDR0;
 224:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 228:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 22c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 230:	fc 01       	movw	r30, r24
 232:	e4 5f       	subi	r30, 0xF4	; 244
 234:	fd 4f       	sbci	r31, 0xFD	; 253
 236:	20 83       	st	Z, r18
	//UDR0 = 'E';
	//UDR0 = rxBuffer[rxWritePos];
	rxWritePos++;
 238:	01 96       	adiw	r24, 0x01	; 1
	
	if(rxWritePos >= READ_BUFFER_SIZE)
 23a:	80 31       	cpi	r24, 0x10	; 16
 23c:	91 05       	cpc	r25, r1
 23e:	2c f4       	brge	.+10     	; 0x24a <__vector_25+0x3e>
ISR(USART0_RX_vect)
{
	rxBuffer[rxWritePos] = UDR0;
	//UDR0 = 'E';
	//UDR0 = rxBuffer[rxWritePos];
	rxWritePos++;
 240:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 244:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
 248:	04 c0       	rjmp	.+8      	; 0x252 <__vector_25+0x46>
	
	if(rxWritePos >= READ_BUFFER_SIZE)
	{
		rxWritePos = 0;
 24a:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__data_end+0x1>
 24e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end>
	}
}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0b be       	out	0x3b, r0	; 59
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
